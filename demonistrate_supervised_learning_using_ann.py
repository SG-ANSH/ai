# -*- coding: utf-8 -*-
"""Demonistrate supervised learning using ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gNFWhjblxq9XE5SSQTjIYR4EiQDzjce-
"""

pip install numpy

import numpy as np
import tensorflow as tf
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Load the Iris dataset (binary classification)
iris = load_iris()
X = iris.data
y = (iris.target == 0).astype(int)  # Setosa vs. Non-Setosa

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the feature data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Build a simple feedforward neural network
model = Sequential()
model.add(Dense(8, input_dim=4, activation='relu'))  # Input layer with 4 features
model.add(Dense(4, activation='relu'))             # Hidden layer with 4 neurons
model.add(Dense(1, activation='sigmoid'))          # Output layer with 1 neuron (binary classification)

# Compile the model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=100, batch_size=5, verbose=1)

# Evaluate the model on the test data
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Loss: {loss:.4f}, Test Accuracy: {accuracy*100:.2f}%")